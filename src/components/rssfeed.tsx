"use client";

/**
 * This component design was generated by v0 by Vercel and modified by myself. @see https://v0.dev/t/QAWxTOVnS1Y
 * https://youtu.be/cPOFttS3-CI -> code to implement
 */

import React, { useState, useEffect } from "react";
import Parser from "rss-parser";

import { Button } from "@/components/ui/button";
import Link from "next/link";
import Image from "next/image";
import { ScrollArea } from "@/components/ui/scroll-area";

import { FaRegStar } from "react-icons/fa6";
import { FaChevronRight } from "react-icons/fa6";

import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
//https://store.steampowered.com/feeds/news/app/553850
const newsLinks = [
  {
    label: "Steam",
    url: "https://www.theverge.com/rss/games/index.xml",
  },
  {
    label: "Blog",
    url: "https://www.theverge.com/rss/index.xml",
  },
];

interface RSSFeedProps {
  url: string;
}

interface FeedItem {
  link: string;
  title: string;
  pubDate: string;
}

const RSSItems: React.FC<RSSFeedProps> = ({ url }) => {
  const [feedData, setFeedData] = useState<FeedItem[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const postsPerPage = 10; // Number of feed items per page

  useEffect(() => {
    const fetchRSSFeed = async () => {
      try {
        const parser = new Parser();
        const feed = await parser.parseURL(url);
        const items: FeedItem[] = feed.items.map((item: any) => ({
          link: item.link,
          title: item.title,
          pubDate: item.pubDate,
        }));
        setFeedData(items);
      } catch (error) {
        setError("Error fetching or parsing the RSS feed.");
      } finally {
        setLoading(false);
      }
    };

    fetchRSSFeed();
  }, [url]);

  const lastPostIndex = currentPage * postsPerPage;
  const firstPostIndex = lastPostIndex - postsPerPage;
  const currentPosts = feedData.slice(firstPostIndex, lastPostIndex);

  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);

  return (
    <>
      {loading && (
        <main className="flex-1 pl-4">
          <div className="space-y-2">
            {Array.from({ length: 10 }).map((_, i) => (
              <div
                key={i}
                className="flex h-[4.125rem] animate-pulse items-center justify-between rounded-md border p-3"
                style={{
                  animationDelay: `${i * 0.1}s`,
                  animationDuration: "1s",
                }}
              >
                <div className="flex items-center space-x-4" />
                <div className="flex items-center space-x-4">
                  <Link href="#" target="_blank" rel="noopener noreferrer">
                    <Button variant="outline">Read More</Button>
                  </Link>
                </div>
              </div>
            ))}
          </div>
        </main>
      )}

      {error && <p>Error: {error}</p>}

      {!loading && !error && (
        <main className="flex-1 pl-4">
          <div className="space-y-2">
            {currentPosts.map((item) => (
              <div
                key={item.link}
                className="flex h-[4.125rem] items-center justify-between rounded-md border p-3"
              >
                <div className="flex items-center space-x-4">
                  <h3 className="font-medium">{item.title}</h3>
                </div>
                <div className="flex items-center space-x-4">
                  <time dateTime={item.pubDate}>
                    {new Date(item.pubDate).toLocaleDateString()}
                  </time>
                  <Link
                    href={item.link}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <Button variant="outline">Read More</Button>
                  </Link>
                </div>
              </div>
            ))}
          </div>
          <PaginationSection
            totalPosts={feedData.length} // Assuming feedData is the array of items
            postsPerPage={postsPerPage}
            currentPage={currentPage}
            setCurrentPage={setCurrentPage}
          />
        </main>
      )}
    </>
  );
};

const RSSFeed = () => {
  const [selectedFeedIndex, setSelectedFeedIndex] = useState(0);

  return (
    <div className="h-100 flex rounded bg-background p-4">
      <aside className="w-64">
        <nav>
          {/*<Link className="flex items-center mb-1" href="#">
            <Button variant="outline" className="justify-between w-full">
              All Sources
              <FaChevronRight className="w-3 h-3" />
            </Button>
          </Link>*/}
          <ScrollArea className="h-[40vmin] rounded-md">
            <ul>
              {newsLinks.map((link, index) => (
                <li key={index}>
                  <Button
                    variant="outline"
                    className="mb-1 w-full justify-between"
                    onClick={() => setSelectedFeedIndex(index)}
                  >
                    {link.label}
                    <FaChevronRight className="h-3 w-3" />
                  </Button>
                </li>
              ))}
              {/*<li>
                <Button className="w-full" variant="outline">
                  mehr hinzuf√ºgen
                </Button>
              </li>*/}
            </ul>
          </ScrollArea>
        </nav>
      </aside>

      <RSSItems url={newsLinks[selectedFeedIndex].url} />
    </div>
  );
};

function PaginationSection({
  totalPosts,
  postsPerPage,
  currentPage,
  setCurrentPage,
}: {
  totalPosts: number;
  postsPerPage: number;
  currentPage: number;
  setCurrentPage: (page: number) => void;
}) {
  const pageNumbers = Math.ceil(totalPosts / postsPerPage);

  const handleNextPage = () => {
    if (currentPage < pageNumbers) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  return (
    <>
      <Pagination className="mt-3">
        <PaginationContent>
          <PaginationItem>
            <PaginationPrevious onClick={handlePrevPage} />
          </PaginationItem>

          {/* Display page numbers */}
          {Array.from({ length: pageNumbers }).map((_, index) => (
            <PaginationItem
              key={index}
              className={currentPage === index + 1 ? "rounded-md" : ""}
            >
              <PaginationLink onClick={() => setCurrentPage(index + 1)}>
                {index + 1}
              </PaginationLink>
            </PaginationItem>
          ))}

          <PaginationItem>
            <PaginationNext onClick={handleNextPage} />
          </PaginationItem>
        </PaginationContent>
      </Pagination>
    </>
  );
}

export default RSSFeed;
